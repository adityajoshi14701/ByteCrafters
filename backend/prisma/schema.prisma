// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id              String           @id @default(uuid())
  name            String?
  email           String           @unique
  image           String?
  role            UserRole         @default(USER)
  password        String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  problems        Problem[]
  submission      Submission[]
  problemSolved   ProblemSolved[]

  // addded field
  playlist PlayList[]

}

model Problem {
  id                 String           @id @default(uuid())
  title              String
  description        String
  difficulty         Difficulty
  tags               String[]
  userId             String
  examples           Json
  constraints        String
  hints              String?
  editorial          String?
  testcases          Json
  codeSnippet        Json
  referenceSolutions Json
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission         Submission[]
  solvedBy           ProblemSolved[]


  //field added
  problemsPlaylists ProblemInPlaylist[]
}

model Submission {
  id             String           @id @default(uuid())
  userId         String
  problemId      String
  sourceCode     Json
  language       String
  stdin          String?
  stdout         String?
  stderr         String?
  compileOutput  String?
  status         String
  memory         String?
  time           String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem        Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)
  testcases      TestCaseResult[]
}

model TestCaseResult {
  id             String           @id @default(uuid())
  submissionId   String
  testcase       Int              // Fixed from "init"
  passed         Boolean
  stdout         String?
  expected       String
  stderr         String?
  compileOutput  String?
  status         String
  memory         String?
  time           String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  submission     Submission       @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  @@index([submissionId])
}

model ProblemSolved {
  id             String           @id @default(uuid())
  userId         String
  problemId      String           // Added this missing field

  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem        Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

//added model 
 model Playlist{
  id             String           @id @default(uuid())
  name           String
  description    String?
  userId         String
  
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  problems       ProblemInPlaylist[]

  user           User @relation(fields:[userId],references:[id],onDelete:Cascade)

  @@unique([name,userId])

 }

//model added
 model ProblemInPlaylist{
  id             String           @id @default(uuid())
  playlistId     String
  problemId      String


  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

playlist  Playlist @relation[fields:[playlistId],references:[id],onDelete:Cascade]
problem Problem @relation[fields:[problemId],references:[id],onDelete:Cascade]

@@unique([playlistId,problemId])
 }